This workshop requires a decent understanding of vectors to complete. Vectors works very similarly to arrays; it can store multiple elements and the elements in them can be accessed with pointers. The key difference between vectors and arrays is that vectors can change their sizes dynamically, their storage is managed by the container automatically. For the vector to change its storage size, it allocates extra storage to make room for potential expansion in the future. Thus, vectors will use more heap memory compared to arrays and it is important to deallocate that memory for the program to run optimally.
Before the line of text is put into the constructor of Car or Racecar constructors it goes through the createInstance function first. This function will check whether the tag is valid, if it is not valid, the function will throw the tag, which will be caught by try block in the main module. On top of that, the constructors of Car and Racecar also can throw when it encounters an inappropriate condition or top speed. Throw statements can sometimes be substituted with return, however that will not work inside a constructor such as Car(std::istream&) and Racecar(std::istream& in).
Using <sdds::Vehicle*> in list and vector allows the program to manipulate its content more efficiently since it only needs to deal with the memory address. With <sdds::Vehicle> the program will need copy constructors and such to complete the task. Instead of creating and destroying entire objects, it is much easier to just changes the pointers and accomplish the same effect.

