This workshop requires a decent understanding of STL algorithms, I have gained a better understanding of how to utilize STL to make my program run more efficiently while using less time to code. Similar to the previous two workshops, objects are created by reading an external text file, however, the program will only take the file name this time. This can be worked around easily by implementing a while function after the fstream so that the function will read all the lines of the file.
Some of the STL functions I have used in the workshop along with the reason why:
std::accumulate was used in the constructor in order to find the total length of the songs.
std::sort was used in SongCollection::sort(), without the use of this function I would need to create my own template to compare and sort the values in the object, which can use up a lot of time when error occurs.
std::find_if was used in SongCollection::inCollection(), this function is used to check if a song artist matches the name given, it does so by going through the list and returns if it does find it. If it does not find it inCollection() will return false, otherwise it will return true.
std::count_if was used in SongCollection::getSongsForArtist() to figure out how many songs does the artist have in this collection, which will later be used to figure out the size needed for the list.
std::copy_if was also used in SongCollection::getSongsForArtist(), this function was used to copy the objects from the container to another container by adding it to the back of the containing if the conditions are fulfilled, in the case of the workshop it copies from theCollection to "sia".
I would like to use std::replace_if in my SongCollection::cleanAlbum() function, but I could not quite figure out the correct formatting or implementation.
STL algorithms can reduce the time required for coding since they are already complete, programmers just neeed to understand how to use them. The library contains a lot of useful common operations that can be performed on a container, I can utilize them without worrying about bugs if I have a proper understanding of the functions. In the case of the workshop, I find the sort function exceptionally helpful since it can be complex and takes some time to complete. However, I do find myself forcing some STL functions into my code examples being std::accumulate and std::find_if, these functions are simple so the ranged for loops version are shorter and comes to mind first.
The solution that comes in mind is using an enum for the sort function. In the workshop, there are three potential entries, the parameter list can be updated to only accept those three instead of a string. Alternatively I can create a while loop that long breaks when one of the three entries are entered by the user.